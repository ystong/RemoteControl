// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: great_proto.v1.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_great_5fproto_2ev1_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_great_5fproto_2ev1_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_great_5fproto_2ev1_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_great_5fproto_2ev1_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_great_5fproto_2ev1_2eproto;
namespace safehd {
class KeyEvent;
struct KeyEventDefaultTypeInternal;
extern KeyEventDefaultTypeInternal _KeyEvent_default_instance_;
class MouseEvent;
struct MouseEventDefaultTypeInternal;
extern MouseEventDefaultTypeInternal _MouseEvent_default_instance_;
class Stream;
struct StreamDefaultTypeInternal;
extern StreamDefaultTypeInternal _Stream_default_instance_;
class UserEvent;
struct UserEventDefaultTypeInternal;
extern UserEventDefaultTypeInternal _UserEvent_default_instance_;
}  // namespace safehd
PROTOBUF_NAMESPACE_OPEN
template<> ::safehd::KeyEvent* Arena::CreateMaybeMessage<::safehd::KeyEvent>(Arena*);
template<> ::safehd::MouseEvent* Arena::CreateMaybeMessage<::safehd::MouseEvent>(Arena*);
template<> ::safehd::Stream* Arena::CreateMaybeMessage<::safehd::Stream>(Arena*);
template<> ::safehd::UserEvent* Arena::CreateMaybeMessage<::safehd::UserEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace safehd {

enum ImgQuality : int {
  QUALITY_LOW = 1,
  QUALITY_MID = 2,
  QUALITY_HIGH = 3,
  AUTO = 4
};
bool ImgQuality_IsValid(int value);
constexpr ImgQuality ImgQuality_MIN = QUALITY_LOW;
constexpr ImgQuality ImgQuality_MAX = AUTO;
constexpr int ImgQuality_ARRAYSIZE = ImgQuality_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImgQuality_descriptor();
template<typename T>
inline const std::string& ImgQuality_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ImgQuality>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ImgQuality_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ImgQuality_descriptor(), enum_t_value);
}
inline bool ImgQuality_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ImgQuality* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ImgQuality>(
    ImgQuality_descriptor(), name, value);
}
enum MouseEventType : int {
  MOUSE_R_CLICK = 1,
  MOUSE_L_CLICK = 2,
  MOUSE_M_CLICK = 3,
  MOUSE_L_DCLICK = 4,
  MOUSE_NONE = 5
};
bool MouseEventType_IsValid(int value);
constexpr MouseEventType MouseEventType_MIN = MOUSE_R_CLICK;
constexpr MouseEventType MouseEventType_MAX = MOUSE_NONE;
constexpr int MouseEventType_ARRAYSIZE = MouseEventType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MouseEventType_descriptor();
template<typename T>
inline const std::string& MouseEventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MouseEventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MouseEventType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MouseEventType_descriptor(), enum_t_value);
}
inline bool MouseEventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MouseEventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MouseEventType>(
    MouseEventType_descriptor(), name, value);
}
// ===================================================================

class MouseEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safehd.MouseEvent) */ {
 public:
  inline MouseEvent() : MouseEvent(nullptr) {}
  ~MouseEvent() override;
  explicit constexpr MouseEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MouseEvent(const MouseEvent& from);
  MouseEvent(MouseEvent&& from) noexcept
    : MouseEvent() {
    *this = ::std::move(from);
  }

  inline MouseEvent& operator=(const MouseEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MouseEvent& operator=(MouseEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MouseEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const MouseEvent* internal_default_instance() {
    return reinterpret_cast<const MouseEvent*>(
               &_MouseEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MouseEvent& a, MouseEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MouseEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MouseEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MouseEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MouseEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MouseEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MouseEvent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MouseEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safehd.MouseEvent";
  }
  protected:
  explicit MouseEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValidFieldNumber = 1,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
    kTypeFieldNumber = 2,
  };
  // optional bool valid = 1;
  bool has_valid() const;
  private:
  bool _internal_has_valid() const;
  public:
  void clear_valid();
  bool valid() const;
  void set_valid(bool value);
  private:
  bool _internal_valid() const;
  void _internal_set_valid(bool value);
  public:

  // optional float x = 3;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 4;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional .safehd.MouseEventType type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::safehd::MouseEventType type() const;
  void set_type(::safehd::MouseEventType value);
  private:
  ::safehd::MouseEventType _internal_type() const;
  void _internal_set_type(::safehd::MouseEventType value);
  public:

  // @@protoc_insertion_point(class_scope:safehd.MouseEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool valid_;
  float x_;
  float y_;
  int type_;
  friend struct ::TableStruct_great_5fproto_2ev1_2eproto;
};
// -------------------------------------------------------------------

class KeyEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safehd.KeyEvent) */ {
 public:
  inline KeyEvent() : KeyEvent(nullptr) {}
  ~KeyEvent() override;
  explicit constexpr KeyEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyEvent(const KeyEvent& from);
  KeyEvent(KeyEvent&& from) noexcept
    : KeyEvent() {
    *this = ::std::move(from);
  }

  inline KeyEvent& operator=(const KeyEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyEvent& operator=(KeyEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeyEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyEvent* internal_default_instance() {
    return reinterpret_cast<const KeyEvent*>(
               &_KeyEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(KeyEvent& a, KeyEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeyEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeyEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KeyEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const KeyEvent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safehd.KeyEvent";
  }
  protected:
  explicit KeyEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValidFieldNumber = 1,
    kValFieldNumber = 2,
  };
  // optional bool valid = 1;
  bool has_valid() const;
  private:
  bool _internal_has_valid() const;
  public:
  void clear_valid();
  bool valid() const;
  void set_valid(bool value);
  private:
  bool _internal_valid() const;
  void _internal_set_valid(bool value);
  public:

  // optional uint32 val = 2;
  bool has_val() const;
  private:
  bool _internal_has_val() const;
  public:
  void clear_val();
  uint32_t val() const;
  void set_val(uint32_t value);
  private:
  uint32_t _internal_val() const;
  void _internal_set_val(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:safehd.KeyEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool valid_;
  uint32_t val_;
  friend struct ::TableStruct_great_5fproto_2ev1_2eproto;
};
// -------------------------------------------------------------------

class UserEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safehd.UserEvent) */ {
 public:
  inline UserEvent() : UserEvent(nullptr) {}
  ~UserEvent() override;
  explicit constexpr UserEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserEvent(const UserEvent& from);
  UserEvent(UserEvent&& from) noexcept
    : UserEvent() {
    *this = ::std::move(from);
  }

  inline UserEvent& operator=(const UserEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserEvent& operator=(UserEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserEvent* internal_default_instance() {
    return reinterpret_cast<const UserEvent*>(
               &_UserEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserEvent& a, UserEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(UserEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserEvent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safehd.UserEvent";
  }
  protected:
  explicit UserEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMouseFieldNumber = 1,
    kKeyFieldNumber = 2,
    kTimestampFieldNumber = 4,
    kRunFieldNumber = 5,
    kQualityFieldNumber = 3,
  };
  // optional .safehd.MouseEvent mouse = 1;
  bool has_mouse() const;
  private:
  bool _internal_has_mouse() const;
  public:
  void clear_mouse();
  const ::safehd::MouseEvent& mouse() const;
  PROTOBUF_NODISCARD ::safehd::MouseEvent* release_mouse();
  ::safehd::MouseEvent* mutable_mouse();
  void set_allocated_mouse(::safehd::MouseEvent* mouse);
  private:
  const ::safehd::MouseEvent& _internal_mouse() const;
  ::safehd::MouseEvent* _internal_mutable_mouse();
  public:
  void unsafe_arena_set_allocated_mouse(
      ::safehd::MouseEvent* mouse);
  ::safehd::MouseEvent* unsafe_arena_release_mouse();

  // optional .safehd.KeyEvent key = 2;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::safehd::KeyEvent& key() const;
  PROTOBUF_NODISCARD ::safehd::KeyEvent* release_key();
  ::safehd::KeyEvent* mutable_key();
  void set_allocated_key(::safehd::KeyEvent* key);
  private:
  const ::safehd::KeyEvent& _internal_key() const;
  ::safehd::KeyEvent* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::safehd::KeyEvent* key);
  ::safehd::KeyEvent* unsafe_arena_release_key();

  // optional uint64 timestamp = 4;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint64_t timestamp() const;
  void set_timestamp(uint64_t value);
  private:
  uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(uint64_t value);
  public:

  // optional bool run = 5;
  bool has_run() const;
  private:
  bool _internal_has_run() const;
  public:
  void clear_run();
  bool run() const;
  void set_run(bool value);
  private:
  bool _internal_run() const;
  void _internal_set_run(bool value);
  public:

  // optional .safehd.ImgQuality quality = 3;
  bool has_quality() const;
  private:
  bool _internal_has_quality() const;
  public:
  void clear_quality();
  ::safehd::ImgQuality quality() const;
  void set_quality(::safehd::ImgQuality value);
  private:
  ::safehd::ImgQuality _internal_quality() const;
  void _internal_set_quality(::safehd::ImgQuality value);
  public:

  // @@protoc_insertion_point(class_scope:safehd.UserEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::safehd::MouseEvent* mouse_;
  ::safehd::KeyEvent* key_;
  uint64_t timestamp_;
  bool run_;
  int quality_;
  friend struct ::TableStruct_great_5fproto_2ev1_2eproto;
};
// -------------------------------------------------------------------

class Stream final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safehd.Stream) */ {
 public:
  inline Stream() : Stream(nullptr) {}
  ~Stream() override;
  explicit constexpr Stream(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Stream(const Stream& from);
  Stream(Stream&& from) noexcept
    : Stream() {
    *this = ::std::move(from);
  }

  inline Stream& operator=(const Stream& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stream& operator=(Stream&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Stream& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stream* internal_default_instance() {
    return reinterpret_cast<const Stream*>(
               &_Stream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Stream& a, Stream& b) {
    a.Swap(&b);
  }
  inline void Swap(Stream* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stream* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Stream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Stream>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Stream& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Stream& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stream* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safehd.Stream";
  }
  protected:
  explicit Stream(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRawFieldNumber = 5,
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kQualityFieldNumber = 4,
  };
  // repeated bytes raw = 5;
  int raw_size() const;
  private:
  int _internal_raw_size() const;
  public:
  void clear_raw();
  const std::string& raw(int index) const;
  std::string* mutable_raw(int index);
  void set_raw(int index, const std::string& value);
  void set_raw(int index, std::string&& value);
  void set_raw(int index, const char* value);
  void set_raw(int index, const void* value, size_t size);
  std::string* add_raw();
  void add_raw(const std::string& value);
  void add_raw(std::string&& value);
  void add_raw(const char* value);
  void add_raw(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& raw() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_raw();
  private:
  const std::string& _internal_raw(int index) const;
  std::string* _internal_add_raw();
  public:

  // optional uint32 width = 1;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  uint32_t width() const;
  void set_width(uint32_t value);
  private:
  uint32_t _internal_width() const;
  void _internal_set_width(uint32_t value);
  public:

  // optional uint32 height = 2;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  uint32_t height() const;
  void set_height(uint32_t value);
  private:
  uint32_t _internal_height() const;
  void _internal_set_height(uint32_t value);
  public:

  // optional uint64 timestamp = 3;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint64_t timestamp() const;
  void set_timestamp(uint64_t value);
  private:
  uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(uint64_t value);
  public:

  // optional .safehd.ImgQuality quality = 4;
  bool has_quality() const;
  private:
  bool _internal_has_quality() const;
  public:
  void clear_quality();
  ::safehd::ImgQuality quality() const;
  void set_quality(::safehd::ImgQuality value);
  private:
  ::safehd::ImgQuality _internal_quality() const;
  void _internal_set_quality(::safehd::ImgQuality value);
  public:

  // @@protoc_insertion_point(class_scope:safehd.Stream)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> raw_;
  uint32_t width_;
  uint32_t height_;
  uint64_t timestamp_;
  int quality_;
  friend struct ::TableStruct_great_5fproto_2ev1_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MouseEvent

// optional bool valid = 1;
inline bool MouseEvent::_internal_has_valid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MouseEvent::has_valid() const {
  return _internal_has_valid();
}
inline void MouseEvent::clear_valid() {
  valid_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool MouseEvent::_internal_valid() const {
  return valid_;
}
inline bool MouseEvent::valid() const {
  // @@protoc_insertion_point(field_get:safehd.MouseEvent.valid)
  return _internal_valid();
}
inline void MouseEvent::_internal_set_valid(bool value) {
  _has_bits_[0] |= 0x00000001u;
  valid_ = value;
}
inline void MouseEvent::set_valid(bool value) {
  _internal_set_valid(value);
  // @@protoc_insertion_point(field_set:safehd.MouseEvent.valid)
}

// optional .safehd.MouseEventType type = 2;
inline bool MouseEvent::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MouseEvent::has_type() const {
  return _internal_has_type();
}
inline void MouseEvent::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::safehd::MouseEventType MouseEvent::_internal_type() const {
  return static_cast< ::safehd::MouseEventType >(type_);
}
inline ::safehd::MouseEventType MouseEvent::type() const {
  // @@protoc_insertion_point(field_get:safehd.MouseEvent.type)
  return _internal_type();
}
inline void MouseEvent::_internal_set_type(::safehd::MouseEventType value) {
  assert(::safehd::MouseEventType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  type_ = value;
}
inline void MouseEvent::set_type(::safehd::MouseEventType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:safehd.MouseEvent.type)
}

// optional float x = 3;
inline bool MouseEvent::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MouseEvent::has_x() const {
  return _internal_has_x();
}
inline void MouseEvent::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float MouseEvent::_internal_x() const {
  return x_;
}
inline float MouseEvent::x() const {
  // @@protoc_insertion_point(field_get:safehd.MouseEvent.x)
  return _internal_x();
}
inline void MouseEvent::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000002u;
  x_ = value;
}
inline void MouseEvent::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:safehd.MouseEvent.x)
}

// optional float y = 4;
inline bool MouseEvent::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MouseEvent::has_y() const {
  return _internal_has_y();
}
inline void MouseEvent::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float MouseEvent::_internal_y() const {
  return y_;
}
inline float MouseEvent::y() const {
  // @@protoc_insertion_point(field_get:safehd.MouseEvent.y)
  return _internal_y();
}
inline void MouseEvent::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000004u;
  y_ = value;
}
inline void MouseEvent::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:safehd.MouseEvent.y)
}

// -------------------------------------------------------------------

// KeyEvent

// optional bool valid = 1;
inline bool KeyEvent::_internal_has_valid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KeyEvent::has_valid() const {
  return _internal_has_valid();
}
inline void KeyEvent::clear_valid() {
  valid_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool KeyEvent::_internal_valid() const {
  return valid_;
}
inline bool KeyEvent::valid() const {
  // @@protoc_insertion_point(field_get:safehd.KeyEvent.valid)
  return _internal_valid();
}
inline void KeyEvent::_internal_set_valid(bool value) {
  _has_bits_[0] |= 0x00000001u;
  valid_ = value;
}
inline void KeyEvent::set_valid(bool value) {
  _internal_set_valid(value);
  // @@protoc_insertion_point(field_set:safehd.KeyEvent.valid)
}

// optional uint32 val = 2;
inline bool KeyEvent::_internal_has_val() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KeyEvent::has_val() const {
  return _internal_has_val();
}
inline void KeyEvent::clear_val() {
  val_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t KeyEvent::_internal_val() const {
  return val_;
}
inline uint32_t KeyEvent::val() const {
  // @@protoc_insertion_point(field_get:safehd.KeyEvent.val)
  return _internal_val();
}
inline void KeyEvent::_internal_set_val(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  val_ = value;
}
inline void KeyEvent::set_val(uint32_t value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:safehd.KeyEvent.val)
}

// -------------------------------------------------------------------

// UserEvent

// optional .safehd.MouseEvent mouse = 1;
inline bool UserEvent::_internal_has_mouse() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || mouse_ != nullptr);
  return value;
}
inline bool UserEvent::has_mouse() const {
  return _internal_has_mouse();
}
inline void UserEvent::clear_mouse() {
  if (mouse_ != nullptr) mouse_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::safehd::MouseEvent& UserEvent::_internal_mouse() const {
  const ::safehd::MouseEvent* p = mouse_;
  return p != nullptr ? *p : reinterpret_cast<const ::safehd::MouseEvent&>(
      ::safehd::_MouseEvent_default_instance_);
}
inline const ::safehd::MouseEvent& UserEvent::mouse() const {
  // @@protoc_insertion_point(field_get:safehd.UserEvent.mouse)
  return _internal_mouse();
}
inline void UserEvent::unsafe_arena_set_allocated_mouse(
    ::safehd::MouseEvent* mouse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mouse_);
  }
  mouse_ = mouse;
  if (mouse) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safehd.UserEvent.mouse)
}
inline ::safehd::MouseEvent* UserEvent::release_mouse() {
  _has_bits_[0] &= ~0x00000001u;
  ::safehd::MouseEvent* temp = mouse_;
  mouse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safehd::MouseEvent* UserEvent::unsafe_arena_release_mouse() {
  // @@protoc_insertion_point(field_release:safehd.UserEvent.mouse)
  _has_bits_[0] &= ~0x00000001u;
  ::safehd::MouseEvent* temp = mouse_;
  mouse_ = nullptr;
  return temp;
}
inline ::safehd::MouseEvent* UserEvent::_internal_mutable_mouse() {
  _has_bits_[0] |= 0x00000001u;
  if (mouse_ == nullptr) {
    auto* p = CreateMaybeMessage<::safehd::MouseEvent>(GetArenaForAllocation());
    mouse_ = p;
  }
  return mouse_;
}
inline ::safehd::MouseEvent* UserEvent::mutable_mouse() {
  ::safehd::MouseEvent* _msg = _internal_mutable_mouse();
  // @@protoc_insertion_point(field_mutable:safehd.UserEvent.mouse)
  return _msg;
}
inline void UserEvent::set_allocated_mouse(::safehd::MouseEvent* mouse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mouse_;
  }
  if (mouse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::safehd::MouseEvent>::GetOwningArena(mouse);
    if (message_arena != submessage_arena) {
      mouse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mouse, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mouse_ = mouse;
  // @@protoc_insertion_point(field_set_allocated:safehd.UserEvent.mouse)
}

// optional .safehd.KeyEvent key = 2;
inline bool UserEvent::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || key_ != nullptr);
  return value;
}
inline bool UserEvent::has_key() const {
  return _internal_has_key();
}
inline void UserEvent::clear_key() {
  if (key_ != nullptr) key_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::safehd::KeyEvent& UserEvent::_internal_key() const {
  const ::safehd::KeyEvent* p = key_;
  return p != nullptr ? *p : reinterpret_cast<const ::safehd::KeyEvent&>(
      ::safehd::_KeyEvent_default_instance_);
}
inline const ::safehd::KeyEvent& UserEvent::key() const {
  // @@protoc_insertion_point(field_get:safehd.UserEvent.key)
  return _internal_key();
}
inline void UserEvent::unsafe_arena_set_allocated_key(
    ::safehd::KeyEvent* key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_);
  }
  key_ = key;
  if (key) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safehd.UserEvent.key)
}
inline ::safehd::KeyEvent* UserEvent::release_key() {
  _has_bits_[0] &= ~0x00000002u;
  ::safehd::KeyEvent* temp = key_;
  key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safehd::KeyEvent* UserEvent::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:safehd.UserEvent.key)
  _has_bits_[0] &= ~0x00000002u;
  ::safehd::KeyEvent* temp = key_;
  key_ = nullptr;
  return temp;
}
inline ::safehd::KeyEvent* UserEvent::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000002u;
  if (key_ == nullptr) {
    auto* p = CreateMaybeMessage<::safehd::KeyEvent>(GetArenaForAllocation());
    key_ = p;
  }
  return key_;
}
inline ::safehd::KeyEvent* UserEvent::mutable_key() {
  ::safehd::KeyEvent* _msg = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:safehd.UserEvent.key)
  return _msg;
}
inline void UserEvent::set_allocated_key(::safehd::KeyEvent* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete key_;
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::safehd::KeyEvent>::GetOwningArena(key);
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:safehd.UserEvent.key)
}

// optional .safehd.ImgQuality quality = 3;
inline bool UserEvent::_internal_has_quality() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool UserEvent::has_quality() const {
  return _internal_has_quality();
}
inline void UserEvent::clear_quality() {
  quality_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::safehd::ImgQuality UserEvent::_internal_quality() const {
  return static_cast< ::safehd::ImgQuality >(quality_);
}
inline ::safehd::ImgQuality UserEvent::quality() const {
  // @@protoc_insertion_point(field_get:safehd.UserEvent.quality)
  return _internal_quality();
}
inline void UserEvent::_internal_set_quality(::safehd::ImgQuality value) {
  assert(::safehd::ImgQuality_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  quality_ = value;
}
inline void UserEvent::set_quality(::safehd::ImgQuality value) {
  _internal_set_quality(value);
  // @@protoc_insertion_point(field_set:safehd.UserEvent.quality)
}

// optional uint64 timestamp = 4;
inline bool UserEvent::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UserEvent::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void UserEvent::clear_timestamp() {
  timestamp_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t UserEvent::_internal_timestamp() const {
  return timestamp_;
}
inline uint64_t UserEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:safehd.UserEvent.timestamp)
  return _internal_timestamp();
}
inline void UserEvent::_internal_set_timestamp(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  timestamp_ = value;
}
inline void UserEvent::set_timestamp(uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:safehd.UserEvent.timestamp)
}

// optional bool run = 5;
inline bool UserEvent::_internal_has_run() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UserEvent::has_run() const {
  return _internal_has_run();
}
inline void UserEvent::clear_run() {
  run_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool UserEvent::_internal_run() const {
  return run_;
}
inline bool UserEvent::run() const {
  // @@protoc_insertion_point(field_get:safehd.UserEvent.run)
  return _internal_run();
}
inline void UserEvent::_internal_set_run(bool value) {
  _has_bits_[0] |= 0x00000008u;
  run_ = value;
}
inline void UserEvent::set_run(bool value) {
  _internal_set_run(value);
  // @@protoc_insertion_point(field_set:safehd.UserEvent.run)
}

// -------------------------------------------------------------------

// Stream

// optional uint32 width = 1;
inline bool Stream::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Stream::has_width() const {
  return _internal_has_width();
}
inline void Stream::clear_width() {
  width_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t Stream::_internal_width() const {
  return width_;
}
inline uint32_t Stream::width() const {
  // @@protoc_insertion_point(field_get:safehd.Stream.width)
  return _internal_width();
}
inline void Stream::_internal_set_width(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  width_ = value;
}
inline void Stream::set_width(uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:safehd.Stream.width)
}

// optional uint32 height = 2;
inline bool Stream::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Stream::has_height() const {
  return _internal_has_height();
}
inline void Stream::clear_height() {
  height_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t Stream::_internal_height() const {
  return height_;
}
inline uint32_t Stream::height() const {
  // @@protoc_insertion_point(field_get:safehd.Stream.height)
  return _internal_height();
}
inline void Stream::_internal_set_height(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  height_ = value;
}
inline void Stream::set_height(uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:safehd.Stream.height)
}

// optional uint64 timestamp = 3;
inline bool Stream::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Stream::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void Stream::clear_timestamp() {
  timestamp_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t Stream::_internal_timestamp() const {
  return timestamp_;
}
inline uint64_t Stream::timestamp() const {
  // @@protoc_insertion_point(field_get:safehd.Stream.timestamp)
  return _internal_timestamp();
}
inline void Stream::_internal_set_timestamp(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  timestamp_ = value;
}
inline void Stream::set_timestamp(uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:safehd.Stream.timestamp)
}

// optional .safehd.ImgQuality quality = 4;
inline bool Stream::_internal_has_quality() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Stream::has_quality() const {
  return _internal_has_quality();
}
inline void Stream::clear_quality() {
  quality_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::safehd::ImgQuality Stream::_internal_quality() const {
  return static_cast< ::safehd::ImgQuality >(quality_);
}
inline ::safehd::ImgQuality Stream::quality() const {
  // @@protoc_insertion_point(field_get:safehd.Stream.quality)
  return _internal_quality();
}
inline void Stream::_internal_set_quality(::safehd::ImgQuality value) {
  assert(::safehd::ImgQuality_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  quality_ = value;
}
inline void Stream::set_quality(::safehd::ImgQuality value) {
  _internal_set_quality(value);
  // @@protoc_insertion_point(field_set:safehd.Stream.quality)
}

// repeated bytes raw = 5;
inline int Stream::_internal_raw_size() const {
  return raw_.size();
}
inline int Stream::raw_size() const {
  return _internal_raw_size();
}
inline void Stream::clear_raw() {
  raw_.Clear();
}
inline std::string* Stream::add_raw() {
  std::string* _s = _internal_add_raw();
  // @@protoc_insertion_point(field_add_mutable:safehd.Stream.raw)
  return _s;
}
inline const std::string& Stream::_internal_raw(int index) const {
  return raw_.Get(index);
}
inline const std::string& Stream::raw(int index) const {
  // @@protoc_insertion_point(field_get:safehd.Stream.raw)
  return _internal_raw(index);
}
inline std::string* Stream::mutable_raw(int index) {
  // @@protoc_insertion_point(field_mutable:safehd.Stream.raw)
  return raw_.Mutable(index);
}
inline void Stream::set_raw(int index, const std::string& value) {
  raw_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:safehd.Stream.raw)
}
inline void Stream::set_raw(int index, std::string&& value) {
  raw_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:safehd.Stream.raw)
}
inline void Stream::set_raw(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  raw_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:safehd.Stream.raw)
}
inline void Stream::set_raw(int index, const void* value, size_t size) {
  raw_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:safehd.Stream.raw)
}
inline std::string* Stream::_internal_add_raw() {
  return raw_.Add();
}
inline void Stream::add_raw(const std::string& value) {
  raw_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:safehd.Stream.raw)
}
inline void Stream::add_raw(std::string&& value) {
  raw_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:safehd.Stream.raw)
}
inline void Stream::add_raw(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  raw_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:safehd.Stream.raw)
}
inline void Stream::add_raw(const void* value, size_t size) {
  raw_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:safehd.Stream.raw)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Stream::raw() const {
  // @@protoc_insertion_point(field_list:safehd.Stream.raw)
  return raw_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Stream::mutable_raw() {
  // @@protoc_insertion_point(field_mutable_list:safehd.Stream.raw)
  return &raw_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace safehd

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::safehd::ImgQuality> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::safehd::ImgQuality>() {
  return ::safehd::ImgQuality_descriptor();
}
template <> struct is_proto_enum< ::safehd::MouseEventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::safehd::MouseEventType>() {
  return ::safehd::MouseEventType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_great_5fproto_2ev1_2eproto
